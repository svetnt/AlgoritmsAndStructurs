package SportProgr;
//Кате надо передать n разных договоров коллегам. Все встречи происходят на разных этажах, а между этажами
// можно перемещаться только по лестницам. Прохождение каждого пролета занимает ровно 1 минуту.
//Сейчас Катя на парковочном этаже, планирует свой маршрут. Коллег можно посетить в любом порядке, но один
// из них покинет офис через Т минут. С парковочного этажа лестницы нет — только лифт, на котором можно
// подняться на любой этаж.
//В первой строке вводятся целые положительные числа n u t (2≤n,t≤100) — количество сотрудников и время,
// когда один из сотрудников покинет офис (в минутах). В следующей строке n чисел — номера этажей, на
// которых находятся сотрудники. Все числа различны и по абсолютной величине не превосходят 100. Номера
// этажей даны в порядке возрастания. В следующей строке записан номер сотрудника, который уйдет через t минут.
//Выведите одно число — минимально возможное число лестничных пролетов, которое понадобится пройти Кате.
// Пример 5  5
//1  4  9  16  25
//2                         Вывод 24
//Пример 6  4
//1  2  3  6  8  25
//5                        Вывод 31

import java.util.Scanner;

public class Elevators {

    public static void main(String[] args) {
       Scanner scanner = new Scanner(System.in);

        int n = scanner.nextInt();
        int t = scanner.nextInt();
        int[] etage = new int[n];
        for (int i = 0; i < n; i++) {
            etage[i] = scanner.nextInt();
        }
        int k = scanner.nextInt();
        scanner.close();

        if (etage[k-1]-etage[0]<t || etage[n-1]-etage[k-1]<t){
            System.out.println(etage[n-1]-etage[0]);
        } else {
            int toUp = etage[n-1]-etage[k-1]+etage[n-1]-etage[0];
            int toDown = etage[k-1]-etage[0]+etage[n-1]-etage[0];
            System.out.println(Math.min(toDown, toUp));
        }
    }
}
