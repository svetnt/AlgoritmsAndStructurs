/* Дан массив из N различных натуральных чисел от 1 до N. Сортировка массива по
  возрастанию "пузырьком" работает следующим образом. Сначала сравниваются первый и
  второй элемент, и, если первый больше второго, то они меняются местами. Затем та
  же процедура производится со вторым и третьим элементом, …, с предпоследним и последним.
  Затем эта процедура снова повторяется с первым и вторым, со вторым и третьим, …, с
  предпоследним и последним элементами. И так (N – 1) раз.
 Сортировка «с конфеткой» выполняется по тем же правилам, но дополнительно задан список
 пар чисел, которые не меняются друг с другом ни при каких условиях (в таком случае сортирующий
  получает конфетку за то, что пропускает соответствующий обмен). Например, наличие в списке
   пары (4,1) обозначает, что если в какой-то момент рядом окажутся числа 4 и 1 или 1 и 4,
  и по алгоритму сортировки их нужно будет поменять местами, то обмена не произойдет, а
  сортирующий получит конфетку.
 Требуется провести сортировку «с конфеткой» данного массива и выдать результат сортировки.
 Сначала вводится число N — количество чисел в массиве, затем N чисел — элементы массива.
 Далее задается число M — количество пар чисел, за которые дают конфетку, а затем M пар чисел.
 Если в списке есть пара (i,j), то и за пару (j,i) также дают конфетку.
 */

import java.util.Arrays;
import java.util.Scanner;

public class KonfetSort {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        for (int i = 0; i < n; i++){
            arr[i] = sc.nextInt();
        }
        int m = sc.nextInt();
        int[][] konf = new int[m][2];
        for (int i = 0; i < m; i++){
            konf[i][0] = sc.nextInt();
            konf[i][1] = sc.nextInt();
        }

        for (int i = 0; i < n; i++){
            for (int j = 0; j < n - 1; j++){
                if (isIsklyucheniye(arr[j], arr[j + 1], konf)){
                    break;
                }
                if (arr[j] > arr[j + 1]){
                    arr[j] ^= arr[j + 1];
                    arr[j + 1] ^= arr[j];
                    arr[j] ^= arr[j + 1];
                }
            }
        }

        for (int i = 0; i < n; i++){
            System.out.println(arr[i]);
        }
    }

    static boolean isIsklyucheniye(int arrJ, int arrJplus, int[][] konf){
        for (int k = 0; k < konf.length; k++){
            if (arrJ == konf[k][0] && arrJplus == konf[k][1] ||
                    arrJplus == konf[k][0] && arrJ == konf[k][1]){
                return true;
            }
        }
        return false;
    }
}